--Script to create all objects for database creation.

-- This script will clean all objects. It will drop and recreate all tables 
-- Table creation script for all master tables 
-- Data insertion for tables : Product, Inventory, Driver_Details, Vehicle_Details, Sales_Representative
-- Script to apply constraints 
-- Sequence will be executed for each table 

SET SERVEROUTPUT ON
/
DECLARE
V_TABLE_EXISTS VARCHAR(1) := 'Y'; 
V_SQL VARCHAR(2000);
CURSOR C_FK IS SELECT TABLE_NAME,CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R'; --CURSOR TO STORE TABLE NAME AND CONSTRAINT NAME
CURSOR C_SK IS SELECT SEQUENCE_NAME FROM USER_SEQUENCES;
I NUMBER:=0;                                                                                        --DECLARE AND INITALIZE VARIABLE I
V_COUNT NUMBER :=0;
V_COUNT1 NUMBER:=0;--DECLARE COUNTER 
BEGIN
WHILE I<4                                                                                           --WHILE LOOP TO ITERATE I VARIABLE UNTIL I VALUE IS LESS THAN 3
	LOOP
		I:=I+1;                                                                                     --INCREMENT I VALUE
		SELECT COUNT(*) INTO V_COUNT FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R';				--SELECT QUERY TO INSERT NUMBER OF REFRENTIAL KEYS INTO VARIABLE V_COUNT
		SELECT COUNT(*) INTO V_COUNT1 FROM USER_SEQUENCES;	
            IF I=1 AND V_COUNT>0 THEN                                                               --IF CLAUSE TO CHECK I VALUE AND NUMBER OF VALUES IN V_COUNT VARIABLE
					FOR FK IN C_FK LOOP                                                             --FOR LOOP TO ITERATE CURSOR C_FK
					EXECUTE IMMEDIATE 'ALTER TABLE ' || FK.TABLE_NAME || ' DROP CONSTRAINT ' || FK.CONSTRAINT_NAME; --DROP ALL FOREIGN KEY CONSTRAINTS IN DATABASE
					DBMS_OUTPUT.PUT_LINE('DROPPING FOREIGN KEY CONSTRAINTS FOR TABLE '||FK.TABLE_NAME);             --DISPLAY DROPPING MESSAGE TO CONSOLE
					END LOOP;
            ELSE IF I=2 AND V_COUNT1>0 THEN
                    FOR SK IN C_SK LOOP
                    EXECUTE IMMEDIATE 'DROP SEQUENCE '||SK.SEQUENCE_NAME;
                    DBMS_OUTPUT.PUT_LINE('DROPPING SEQUENCES '||SK.SEQUENCE_NAME);
                    END LOOP;
            ELSE IF I=3 THEN                                                                         --CHECK ELSE CONDITION
					FOR I IN(
					SELECT 'CUSTOMER_ADDRESS' TABLE_NAME FROM DUAL UNION ALL                         --FOR LOOP INITIALIZE TO ITERATE 12 TIMES
					SELECT 'EXTERNAL_TRANSACTION' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'INTERNAL_TRANSACTION' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'SALES_REP_ACTIVITY' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'WAREHOUSE' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'DRIVER_DETAILS' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'VEHICLE_DETAILS' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'PRODUCT' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'CUSTOMER_CONTACT' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'CUSTOMER' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'SALES_REPRESENTATIVE' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'PRODUCT_PRICE_LOG' TABLE_NAME FROM DUAL UNION ALL
					SELECT 'INVENTORY' TABLE_NAME FROM DUAL
					)
					LOOP
					DBMS_OUTPUT.PUT_LINE('DROPPING TABLE ' || I.TABLE_NAME);									--PRINTING OUTPUT TO CONSOLE WITH DROPPING TABLE NAME															
						BEGIN
							SELECT 'Y' INTO V_TABLE_EXISTS	FROM USER_TABLES WHERE TABLE_NAME=I.TABLE_NAME;		--CHECK IF TABLE EXISTS FROM DATA DICTIONARY VIEW
							V_SQL := 'DROP TABLE '||I.TABLE_NAME;                                               
							EXECUTE IMMEDIATE V_SQL;
							DBMS_OUTPUT.PUT_LINE('TABLE '||I.TABLE_NAME||' DROPPED SUCCESSFULLY');              --DROP TABLES PRESENT IN DATABASE
       
							EXCEPTION                                                                           --EXCEPTION HANDLING BLOCK
							WHEN NO_DATA_FOUND THEN
							DBMS_OUTPUT.PUT_LINE('TABLE ALREADY DROPPED');                                
						END;
					END LOOP;
				DBMS_OUTPUT.PUT_LINE('SCHEMA CLEANUP SUCCESSFULLY COMPLETED');                                  -- DISPLAYING MESSAGE TO CONSOLE
			END IF;
	END IF; 
    END IF;--END LOOP AND IF STATEMENTS
 END LOOP;
END;
/
CREATE SEQUENCE PRODUCT_SEQ
START WITH 223001
INCREMENT BY 1
NOCYCLE;
/
CREATE TABLE PRODUCT(                                                                                           --DDL STATEMENT TO CREATE TABLE PRODUCT
ID NUMBER,
NAME VARCHAR2(30) UNIQUE NOT NULL,
COST_PRICE NUMBER(20,2) CHECK (COST_PRICE >0) NOT NULL,
SELLING_PRICE NUMBER(20,2) CHECK (SELLING_PRICE > 0) NOT NULL,
PRODUCT_DESCRIPTION VARCHAR2(250) ,
CONSTRAINT PRODUCT_ID_PK PRIMARY KEY(ID)
)
/
INSERT INTO PRODUCT(ID, NAME, COST_PRICE, SELLING_PRICE, PRODUCT_DESCRIPTION)                                      --INSERTING DATA INTO PRODUCT TABLE
VALUES(PRODUCT_SEQ.NEXTVAL, 'TYLENOL', 8.25,10.5,'IT IS USED TO RELIEVE MILD HEADACHE, TOOTHACHES AND MUSCLE ACHES.');
INSERT INTO PRODUCT(ID, NAME, COST_PRICE, SELLING_PRICE, PRODUCT_DESCRIPTION)
VALUES(PRODUCT_SEQ.NEXTVAL, 'PEPTO BISMOL', 7.75, 9.75, 'IT IS USED TO TREAT HEART BURN, NAUSEA AND UPSET STOMACH.');
INSERT INTO PRODUCT(ID, NAME, COST_PRICE, SELLING_PRICE, PRODUCT_DESCRIPTION)
VALUES(PRODUCT_SEQ.NEXTVAL, 'NYQUIL SYRUP',  14, 17.25, 'IT IS USED TO RELIEVE COUGHING,STUFFY AND RUNNY NOSE AND ALSO FOR SORE THROAT AND SNEEZING.');
INSERT INTO PRODUCT(ID, NAME, COST_PRICE, SELLING_PRICE, PRODUCT_DESCRIPTION)
VALUES(PRODUCT_SEQ.NEXTVAL, 'IMODIUM',  17.5, 20, 'IT IS USED TO TREAT SUDDEN DIARRHEA.');
INSERT INTO PRODUCT(ID, NAME, COST_PRICE, SELLING_PRICE, PRODUCT_DESCRIPTION)
VALUES(PRODUCT_SEQ.NEXTVAL, 'MUCINEX', 22.5,25.5, 'IT IS USED TO RELEASE CHESTÂ CONGESTION.');
/
COMMIT;
/
SELECT *FROM PRODUCT;
/
CREATE SEQUENCE CUSTOMER_SEQ
START WITH 123001
INCREMENT BY 1
NOCYCLE;
/
CREATE TABLE CUSTOMER(                                                                             --DDL STATEMENT TO CREATE CUSTOMER TABLE
ID NUMBER,
CUSTOMER_MEETING_ID NUMBER,
REF_WAREHOUSE_ID NUMBER,
NAME VARCHAR2(50) NOT NULL,
TYPE VARCHAR2(20) NOT NULL,
CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY(ID)
)
/
CREATE TABLE CUSTOMER_ADDRESS(                                                                    --DDL STATEMENT TO CREATE CUSTOMER_ADDRESS TABLE
ID NUMBER,
ADDRESS_LINE_1 VARCHAR2(100) NOT NULL,
ADDRESS_LINE_2 VARCHAR2(100),
CITY VARCHAR2(50) NOT NULL,
REGION VARCHAR2(50)NOT NULL,
STATE VARCHAR2(50) NOT NULL,
ZIP_CODE NUMBER NOT NULL,
COUNTRY VARCHAR2(50) NOT NULL
)
/
CREATE TABLE CUSTOMER_CONTACT(                                                                 			 --CREATE TABLE CUSTOMER_CONTACT
ID NUMBER,
MOBILE_NO NUMBER NOT NULL,
EMAIL VARCHAR2(50) UNIQUE NOT NULL
)
/
CREATE SEQUENCE SALES_REPRESENTATIVE_SEQ
START WITH 323001
INCREMENT BY 1
NOCYCLE;                        
/
CREATE TABLE SALES_REPRESENTATIVE(                                                              			--CREATE TABLE SALES_REPRESENTATIVE
ID NUMBER,
REF_WAREHOUSE_ID NUMBER UNIQUE,
FIRST_NAME VARCHAR2(50) NOT NULL,
MIDDLE_NAME VARCHAR2(50),
LAST_NAME VARCHAR2(50)NOT NULL,
CONTACT NUMBER NOT NULL,
EMAIL VARCHAR2(50) UNIQUE NOT NULL,
CONSTRAINT SALESREP_ID_PK PRIMARY KEY(ID)
)
/
INSERT INTO SALES_REPRESENTATIVE (ID, REF_WAREHOUSE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, CONTACT, EMAIL)  --INSERTING DATA TO  SALES_REPRESENTATIVE TABLE
VALUES (SALES_REPRESENTATIVE_SEQ.NEXTVAL, 6601, 'JOHN', 'ROBERT', 'KENEDY', 2247561862, 'KENNEDY.J@ORGANIZATION.COM');
INSERT INTO SALES_REPRESENTATIVE (ID, REF_WAREHOUSE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, CONTACT, EMAIL)
VALUES (SALES_REPRESENTATIVE_SEQ.NEXTVAL, 6602, 'NICK', 'ROBIN', 'PETER', 8573761963, 'PETER.N@ORGANIZATION.COM');
INSERT INTO SALES_REPRESENTATIVE (ID, REF_WAREHOUSE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, CONTACT, EMAIL)
VALUES (SALES_REPRESENTATIVE_SEQ.NEXTVAL, 6603, 'ROCK', 'THOMAS', 'EDISON', 2248761932, 'EDISON.R@ORGANIZATION.COM');
INSERT INTO SALES_REPRESENTATIVE (ID, REF_WAREHOUSE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, CONTACT, EMAIL)
VALUES (SALES_REPRESENTATIVE_SEQ.NEXTVAL, 6604, 'KEVIN', 'PETER', 'HART', 8574761752, 'HART.K@ORGANIZATION.COM');
/
COMMIT;
/
SELECT *FROM SALES_REPRESENTATIVE
/
CREATE SEQUENCE EXTERNAL_TRANSACTION_SEQ
START WITH 23210001
INCREMENT BY 1
NOCYCLE
/ 
CREATE TABLE EXTERNAL_TRANSACTION(																			--CREATING EXTERNAL TRANSACTION TABLE
TRANSACTION_ID NUMBER,
PRODUCT_ID NUMBER NOT NULL,
CUSTOMER_ID NUMBER NOT NULL,
TRANSACTION_TYPE VARCHAR2(20) CHECK (TRANSACTION_TYPE IN ('P', 'R','P','R')) NOT NULL,
DATE_TIME DATE,
QUANTITY NUMBER NOT NULL,
CONSTRAINT TRANSACTION_ID_PK PRIMARY KEY(TRANSACTION_ID)
)
/
CREATE SEQUENCE INTERNAL_TRANSACTION_SEQ
START WITH 23210001
INCREMENT BY 1
NOCYCLE
/

CREATE TABLE INTERNAL_TRANSACTION(                                                             --CREATING INTERNAL TRANSACTION TABLE 
TRANSACTION_ID NUMBER,
WAREHOUSE_FROM NUMBER NOT NULL,
WAREHOUSE_TO NUMBER NOT NULL,
PRODUCT_ID NUMBER NOT NULL,
DATE_TIME DATE,
QUANTITY NUMBER NOT NULL,
CONSTRAINT TRANSACTION_ID1_PK PRIMARY KEY(TRANSACTION_ID)
)
/
CREATE SEQUENCE SALES_REP_ACTIVITY_SEQ
START WITH 55112201
INCREMENT BY 1
NOCYCLE;
/
CREATE TABLE SALES_REP_ACTIVITY(                                                               
MEETING_ID NUMBER,
SALESREP_ID NUMBER NOT NULL,
CUSTOMER_NAME VARCHAR2(50) NOT NULL,
INTERACTION_TYPE VARCHAR2(30) NOT NULL,
CUSTOMER_TYPE VARCHAR2(30) NOT NULL,
INTERACTION_DATE DATE NOT NULL,
INTERACTION_DURATION NUMBER NOT NULL,
ADDRESS_LINE_1 VARCHAR2(200)NOT NULL,
ADDRESS_LINE_2 VARCHAR2(200),
CITY VARCHAR2(50)NOT NULL,
REGION VARCHAR2(50)NOT NULL,
STATE  VARCHAR2(50)NOT NULL,
ZIPCODE NUMBER NOT NULL,
COUNTRY VARCHAR2(30) NOT NULL,
MOBILE_NO NUMBER UNIQUE NOT NULL,
EMAIL_ID VARCHAR2(30) UNIQUE NOT NULL,
CUSTOMER_CONVERTED_FLAG VARCHAR2(20) CHECK (CUSTOMER_CONVERTED_FLAG IN ('N', 'Y','Y','N')) NOT NULL,
CONSTRAINT MEETING_ID_PK PRIMARY KEY(MEETING_ID)
)
/
CREATE SEQUENCE INVENTORY_SEQ
START WITH 723001
INCREMENT BY 1
NOCYCLE
/
CREATE TABLE INVENTORY(
ID NUMBER  UNIQUE NOT NULL,
PRODUCT_ID NUMBER,
WAREHOUSE_ID NUMBER,
PRODUCT_QUANTITY NUMBER NOT NULL,
CONSTRAINT INVENTORY_ID_PK PRIMARY KEY(PRODUCT_ID,WAREHOUSE_ID)
)
/
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223001, 6601, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223002, 6601, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223003, 6601, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223004, 6601, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223005, 6601, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223001, 6602, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223002, 6602, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223003, 6602, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223004, 6602, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223005, 6602, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223001, 6603, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223002, 6603, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223003, 6603, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223004, 6603, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223005, 6603, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223001, 6604, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223002, 6604, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223003, 6604, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223004, 6604, 350);
INSERT INTO INVENTORY VALUES (INVENTORY_SEQ.NEXTVAL, 223005, 6604, 350);
/
COMMIT;
/
SELECT *FROM INVENTORY
/
CREATE SEQUENCE WAREHOUSE_SEQ
START WITH 6601
INCREMENT BY 1
NOCYCLE
/
CREATE TABLE WAREHOUSE(                                                                --CREATING WAREHOUSE TABLE
ID NUMBER,
NAME VARCHAR2(50) UNIQUE NOT NULL,
ADDRESS VARCHAR2(50) NOT NULL,
VEHICLE_ID NUMBER UNIQUE,
CONSTRAINT  WAREHOUSE_ID_PK PRIMARY KEY(ID)
)
/
INSERT INTO WAREHOUSE (ID, NAME, ADDRESS, VEHICLE_ID)                --INSERTING DATA INTO WAREHOUSE TABLE
VALUES (WAREHOUSE_SEQ.NEXTVAL, 'BOS1C','7 CROWN DRIVE, BOSTON, MA 02169',823001);
INSERT INTO WAREHOUSE (ID, NAME, ADDRESS, VEHICLE_ID)
VALUES (WAREHOUSE_SEQ.NEXTVAL, 'BOS2W','7583, COMMON BRIDGE STREET, QUINCY, MA 77054',823002);
INSERT INTO WAREHOUSE (ID, NAME, ADDRESS,VEHICLE_ID)
VALUES (WAREHOUSE_SEQ.NEXTVAL, 'BOS3R','FRANK 57 WEST, PROVIDENCE, MA 10019',823003);
INSERT INTO WAREHOUSE (ID, NAME, ADDRESS,  VEHICLE_ID)
VALUES (WAREHOUSE_SEQ.NEXTVAL, 'BOS4Q','11 AVE PORT, DORCHESTER,Â MAÂ 07093', 823004);
/
COMMIT;
/
SELECT *FROM WAREHOUSE;
/
CREATE SEQUENCE DRIVER_DETAILS_SEQ
START WITH 923001
INCREMENT BY 1
NOCYCLE;
/
CREATE TABLE DRIVER_DETAILS(                                                             --CREATING DRIVER_DETAILS TABLE 
ID NUMBER,
NAME VARCHAR2(50) NOT NULL,
CONTACT NUMBER UNIQUE NOT NULL,
EFFECTIVE_DATE DATE,
LICENCE VARCHAR2(30) UNIQUE NOT NULL,
CONSTRAINT DRIVER_ID_PK PRIMARY KEY(ID)
)
/
INSERT INTO DRIVER_DETAILS (ID, NAME, CONTACT, EFFECTIVE_DATE, LICENCE)                   
VALUES (DRIVER_DETAILS_SEQ.NEXTVAL, 'JOHNNIE WALKER', 2127566523, TO_DATE('28/02/2022','DD/MM/YYYY'),'SA99887769');
INSERT INTO DRIVER_DETAILS (ID, NAME, CONTACT, EFFECTIVE_DATE, LICENCE)
VALUES (DRIVER_DETAILS_SEQ.NEXTVAL, 'HARRY SINGH', 6166098797, TO_DATE('7/3/2022','DD/MM/YYYY'), 'S998880178');
INSERT INTO DRIVER_DETAILS (ID, NAME, CONTACT, EFFECTIVE_DATE, LICENCE)
VALUES (DRIVER_DETAILS_SEQ.NEXTVAL, 'JESSIE PINKMAN', 7168785676, TO_DATE('9/3/2022','DD/MM/YYYY'), 'S157788903');
INSERT INTO DRIVER_DETAILS (ID, NAME, CONTACT, EFFECTIVE_DATE, LICENCE)
VALUES (DRIVER_DETAILS_SEQ.NEXTVAL, 'PETER PARKER',2216566232, TO_DATE('13/3/2022','DD/MM/YYYY'), 'SA89866725');
INSERT INTO DRIVER_DETAILS (ID, NAME, CONTACT, EFFECTIVE_DATE, LICENCE)
VALUES (DRIVER_DETAILS_SEQ.NEXTVAL, 'WALTER WHITE',3313345567, TO_DATE('11/3/2022','DD/MM/YYYY'),'SW6689252');
/
COMMIT;
/
SELECT *FROM DRIVER_DETAILS;
/
CREATE SEQUENCE VEHICLE_DETAILS_SEQ
START WITH 823001
INCREMENT BY 1
NOCYCLE
/
CREATE TABLE VEHICLE_DETAILS(                                                               --CREATING VEHICLE_DETAILS TABLE
ID NUMBER,
DRIVER_ID NUMBER,
REGISTRATION_NUMBER VARCHAR2(50) UNIQUE NOT NULL,
CONSTRAINT VEHICLE_ID_PK PRIMARY KEY(ID)
);
/
INSERT INTO VEHICLE_DETAILS(ID,DRIVER_ID,REGISTRATION_NUMBER)                               --INSERTING DATA INTO VEHICLE DETAILS TABLE                       
VALUES (VEHICLE_DETAILS_SEQ.NEXTVAL,923001,'AB-90156');
INSERT INTO VEHICLE_DETAILS(ID,DRIVER_ID,REGISTRATION_NUMBER)                                                  
VALUES (VEHICLE_DETAILS_SEQ.NEXTVAL,923002,'AE-11078');
INSERT INTO VEHICLE_DETAILS(ID,DRIVER_ID,REGISTRATION_NUMBER)                                                    
VALUES (VEHICLE_DETAILS_SEQ.NEXTVAL,923003,'AG-80765');
INSERT INTO VEHICLE_DETAILS(ID,DRIVER_ID,REGISTRATION_NUMBER)                                                      
VALUES (VEHICLE_DETAILS_SEQ.NEXTVAL,923004,'AL-90123');
INSERT INTO VEHICLE_DETAILS(ID,DRIVER_ID,REGISTRATION_NUMBER)                                                    
VALUES (VEHICLE_DETAILS_SEQ.NEXTVAL,923005,'SQ-76431');
/
COMMIT;
/
SELECT *FROM VEHICLE_DETAILS;
/

CREATE TABLE PRODUCT_PRICE_LOG
(
ID NUMBER,
NAME VARCHAR2(30) NOT NULL,
OLD_COST_PRICE NUMBER(20,2) NOT NULL,
OLD_SELLING_PRICE NUMBER(20,2) NOT NULL,
DATE_OF_CHANGE TIMESTAMP
)
/
ALTER TABLE CUSTOMER ADD CONSTRAINT "CUSTOMER_MEETING_ID_FK" FOREIGN KEY ("CUSTOMER_MEETING_ID") REFERENCES "SALES_REP_ACTIVITY" ("MEETING_ID")    --CREATING FOREIGN KEY CONSTRAINTS
/
ALTER TABLE CUSTOMER ADD CONSTRAINT "REF_WAREHOUSE_ID_FK" FOREIGN KEY ("REF_WAREHOUSE_ID") REFERENCES "WAREHOUSE" ("ID");
/
ALTER TABLE CUSTOMER_ADDRESS ADD CONSTRAINT "CUSTOMER_ID_FK" FOREIGN KEY ("ID") REFERENCES "CUSTOMER" ("ID");
/
ALTER TABLE CUSTOMER_CONTACT ADD CONSTRAINT "CUSTOMER_ID1_FK" FOREIGN KEY ("ID") REFERENCES "CUSTOMER" ("ID");
/
ALTER TABLE SALES_REPRESENTATIVE ADD CONSTRAINT "REF_WAREHOUSE_ID1_FK" FOREIGN KEY ("REF_WAREHOUSE_ID") REFERENCES "WAREHOUSE" ("ID")
/
ALTER TABLE EXTERNAL_TRANSACTION ADD CONSTRAINT "PRODUCT_ID_FK" FOREIGN KEY ("PRODUCT_ID") REFERENCES "PRODUCT" ("ID")
/
ALTER TABLE EXTERNAL_TRANSACTION ADD CONSTRAINT "CUSTOMER_ID2_FK" FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("ID")
/
ALTER TABLE INTERNAL_TRANSACTION ADD CONSTRAINT "PRODUCT_ID_FK1" FOREIGN KEY ("PRODUCT_ID") REFERENCES "PRODUCT" ("ID")
/
ALTER TABLE INTERNAL_TRANSACTION ADD CONSTRAINT "WAREHOUSE_FROM_FK" FOREIGN KEY ("WAREHOUSE_FROM") REFERENCES "WAREHOUSE" ("ID")
/
ALTER TABLE INTERNAL_TRANSACTION ADD CONSTRAINT "WAREHOUSE_FROM_FK1" FOREIGN KEY ("WAREHOUSE_TO") REFERENCES "WAREHOUSE" ("ID")
/
ALTER TABLE SALES_REP_ACTIVITY ADD CONSTRAINT "SALESREP_ID_FK2" FOREIGN KEY ("SALESREP_ID") REFERENCES "SALES_REPRESENTATIVE" ("ID")
/
ALTER TABLE INVENTORY ADD CONSTRAINT "PRODUCT_ID2_FK" FOREIGN KEY ("PRODUCT_ID") REFERENCES "PRODUCT" ("ID")
/
ALTER TABLE INVENTORY ADD CONSTRAINT "WAREHOUSE_ID_FK2" FOREIGN KEY ("WAREHOUSE_ID") REFERENCES "WAREHOUSE" ("ID");
/
ALTER TABLE WAREHOUSE ADD CONSTRAINT "VEHICLE_ID_FK" FOREIGN KEY("VEHICLE_ID") REFERENCES VEHICLE_DETAILS("ID");
/
ALTER TABLE VEHICLE_DETAILS ADD CONSTRAINT "DRIVER_ID_FK" FOREIGN KEY ("DRIVER_ID") REFERENCES "DRIVER_DETAILS" ("ID");
/


