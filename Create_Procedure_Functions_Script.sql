--Script to run PLSQL Stored Procedure block for the following :

--Sales_Representative_Activity :
--	This procedure takes input from sales representative and inputs data for all parameters of a meeting
--	This procedure checks for conversion flag and edits all tables (customer, custmer_address,customer_contact)


--Internal_Transaction :


--External_Transaction :

--CREATE PROCEDURE TO EXECUTE EXTERNAL TRANSACTION
CREATE OR REPLACE PROCEDURE INSERT_EXT_TRAN(
PROD_ID EXTERNAL_TRANSACTION.PRODUCT_ID%TYPE, 
CUST_ID EXTERNAL_TRANSACTION.CUSTOMER_ID%TYPE ,
TRANS_TYPE EXTERNAL_TRANSACTION.TRANSACTION_TYPE%TYPE, 
DT_TIME EXTERNAL_TRANSACTION.DATE_TIME%TYPE,
QNT EXTERNAL_TRANSACTION.QUANTITY%TYPE
)	
AS
    REF_WAR CUSTOMER.REF_WAREHOUSE_ID%TYPE;
    SALES_REP SALES_REPRESENTATIVE.ID%TYPE;
    OLD_QTY INVENTORY.PRODUCT_QUANTITY%TYPE;
    NEW_QTY INVENTORY.PRODUCT_QUANTITY%TYPE;
    INV_VAL INVENTORY.PRODUCT_QUANTITY%TYPE;
	EXC_PRODUCT EXCEPTION;
	EXC_CUSTOMER EXCEPTION;
	--EXC_TRANSACTION EXCEPTION;
	C_PRODUCT INT;
	C_CUSTOMER INTEGER;
	--C_TYPE INTEGER;
BEGIN
	SELECT COUNT(*) INTO C_PRODUCT FROM PRODUCT WHERE ID=PROD_ID;
	SELECT COUNT(*) INTO C_CUSTOMER FROM CUSTOMER WHERE ID=CUST_ID;
	--SELECT COUNT(DISTINCT TRANSACTION_TYPE) INTO C_TYPE FROM EXTERNAL_TRANSACTION WHERE TRANSACTION_TYPE=TRANS_TYPE;

	IF C_PRODUCT=0 THEN
		RAISE EXC_PRODUCT;
	END IF;

	IF C_CUSTOMER=0 THEN
		RAISE EXC_CUSTOMER;
	END IF;

	/*IF C_TYPE=0 THEN
		RAISE EXC_TRANSACTION;
	END IF;*/

    SELECT REF_WAREHOUSE_ID INTO REF_WAR FROM CUSTOMER WHERE ID = CUST_ID;
    SELECT ID INTO SALES_REP FROM SALES_REPRESENTATIVE WHERE REF_WAREHOUSE_ID = REF_WAR;
    SELECT PRODUCT_QUANTITY INTO INV_VAL FROM INVENTORY WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = REF_WAR; 
    SELECT PRODUCT_QUANTITY INTO OLD_QTY FROM INVENTORY WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = REF_WAR;

	IF (INV_VAL >= QNT AND LOWER(TRANS_TYPE) = 'P') THEN 
        INSERT INTO EXTERNAL_TRANSACTION VALUES (EXTERNAL_TRANSACTION_SEQ.NEXTVAL, PROD_ID, CUST_ID, UPPER(TRANS_TYPE), DT_TIME ,QNT);
        COMMIT;
        NEW_QTY := OLD_QTY - QNT;
        UPDATE INVENTORY SET PRODUCT_QUANTITY = NEW_QTY WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = REF_WAR;
        COMMIT;
	END IF;

	IF (LOWER(TRANS_TYPE) = 'R') THEN 
        INSERT INTO EXTERNAL_TRANSACTION VALUES (EXTERNAL_TRANSACTION_SEQ.NEXTVAL, PROD_ID, CUST_ID, UPPER(TRANS_TYPE), DT_TIME ,QNT);
        COMMIT;
        NEW_QTY := OLD_QTY + QNT;
        UPDATE INVENTORY SET PRODUCT_QUANTITY = NEW_QTY WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = REF_WAR;
        COMMIT;
    END IF;

	IF (INV_VAL < QNT AND LOWER(TRANS_TYPE) = 'P') THEN
    DBMS_OUTPUT.PUT_LINE('MAXIMUM '|| INV_VAL || ' QUANTITY CAN BE PURCHASED. PLEASE INFORM WAREHOUSE MANAGER FOR MORE QUANTITY REQUIRED'); 
    END IF;

	IF LOWER(TRANS_TYPE) NOT IN ('P', 'R') THEN
    DBMS_OUTPUT.PUT_LINE('INCORRECT TRANSACTION TYPE');
    END IF;  

EXCEPTION
		WHEN EXC_PRODUCT THEN
           DBMS_OUTPUT.PUT_LINE('ENTERED PRODUCT ID IS INCORRECT');
        WHEN EXC_CUSTOMER THEN
           DBMS_OUTPUT.PUT_LINE('ENTERED CUSTOMER ID IS INCORREDT');
       -- WHEN EXC_TRANSACTION THEN
         --DBMS_OUTPUT.PUT_LINE('TRANSACTION TYPE IS NOT VALID ENTER P FOR PURCHASE AND R FOR RETURN');
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_LINE('INCORRECT TRANSACTIONÂ DETAILS');
END;
/
CREATE OR REPLACE PROCEDURE INSERT_INT_TRAN
    (WAR_FR INTERNAL_TRANSACTION.WAREHOUSE_FROM%TYPE,
    WAR_TO INTERNAL_TRANSACTION.WAREHOUSE_TO%TYPE,
    PROD_ID INTERNAL_TRANSACTION.PRODUCT_ID%TYPE,
    TRAN_DATE INTERNAL_TRANSACTION.DATE_TIME%TYPE,
    QTY INTERNAL_TRANSACTION.QUANTITY%TYPE) --PROD_ID INT, QTY INT
AS
    OLD_QTY_FR INTERNAL_TRANSACTION.PRODUCT_ID%TYPE;
    NEW_QTY_FR INTERNAL_TRANSACTION.PRODUCT_ID%TYPE;
    OLD_QTY_TO INTERNAL_TRANSACTION.PRODUCT_ID%TYPE;
    NEW_QTY_TO INTERNAL_TRANSACTION.PRODUCT_ID%TYPE;
	EXC_WAREHOUSE EXCEPTION;
	EXC_WAREHOUSE1 EXCEPTION;
	EXC_PRODUCT EXCEPTION;
    EXC_SAME_WAREHOUSE EXCEPTION;
	C_NAME INT;
	C_NAME1 INT;
	C_PROD INT;
BEGIN 
		SELECT COUNT(*) INTO C_NAME  FROM WAREHOUSE WHERE ID=WAR_FR;
		SELECT COUNT(*) INTO C_NAME1  FROM WAREHOUSE WHERE ID=WAR_TO;
		SELECT COUNT(*) INTO C_PROD  FROM PRODUCT WHERE ID=PROD_ID;

	IF C_NAME=0 THEN
		RAISE EXC_WAREHOUSE;
	END IF;

	IF C_NAME1=0 THEN
		RAISE EXC_WAREHOUSE1;
	END IF;

	IF C_PROD=0 THEN
		RAISE EXC_PRODUCT;
	END IF; 

    IF (WAR_FR = WAR_TO) THEN
        RAISE EXC_SAME_WAREHOUSE;
    END IF;

        SELECT PRODUCT_QUANTITY INTO OLD_QTY_FR FROM INVENTORY WHERE WAREHOUSE_ID = WAR_FR AND  PRODUCT_ID = PROD_ID;
        SELECT PRODUCT_QUANTITY INTO OLD_QTY_TO FROM INVENTORY WHERE WAREHOUSE_ID = WAR_TO AND  PRODUCT_ID = PROD_ID;
        NEW_QTY_FR := OLD_QTY_FR - QTY;
        NEW_QTY_TO := OLD_QTY_TO + QTY;
        
    IF (OLD_QTY_FR >= QTY) THEN 
    
       INSERT INTO INTERNAL_TRANSACTION VALUES (INTERNAL_TRANSACTION_SEQ.NEXTVAL, WAR_FR, WAR_TO, PROD_ID, TRAN_DATE, QTY); 
        COMMIT;
        UPDATE INVENTORY SET PRODUCT_QUANTITY = NEW_QTY_FR WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = WAR_FR;
       COMMIT;
        UPDATE INVENTORY SET PRODUCT_QUANTITY = NEW_QTY_TO WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = WAR_TO;
        COMMIT; 
    END IF;

	IF (OLD_QTY_FR < QTY) THEN 
        DBMS_OUTPUT.PUT_LINE('MAXIMUM QUANTITY AVAILABLE IN WAREHOUSE ' ||  WAR_FR || ' IS ' || OLD_QTY_FR);
    END IF;

EXCEPTION 
	    WHEN EXC_WAREHOUSE THEN
           DBMS_OUTPUT.PUT_LINE('WAREHOUSE FROM ID INVALID');
        WHEN EXC_WAREHOUSE1 THEN
           DBMS_OUTPUT.PUT_LINE('WAREHOUSE TO ID INVALID');
        WHEN EXC_PRODUCT THEN
         DBMS_OUTPUT.PUT_LINE('INVALID PRODUCT_ID');
        WHEN EXC_SAME_WAREHOUSE THEN
         DBMS_OUTPUT.PUT_LINE('WAREHOUSE SOURCE AND DESTINATION CANNOT BE SAME');
        WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('INVALID TRANSACTION');
END;
/
CREATE OR REPLACE PROCEDURE INSERT_SALES_REP_ACTIVITY
(
SALESREP_ID_V  SALES_REP_ACTIVITY.SALESREP_ID%TYPE,
CUSTOMER_NAME_V IN  SALES_REP_ACTIVITY.CUSTOMER_NAME%TYPE,
INTERACTION_TYPE_V IN  SALES_REP_ACTIVITY.INTERACTION_TYPE%TYPE,
CUSTOMER_TYPE_V IN  SALES_REP_ACTIVITY.CUSTOMER_TYPE%TYPE,
INTERACTION_DATE_V IN  SALES_REP_ACTIVITY.INTERACTION_DATE%TYPE,
INTERACTION_DURATION_V IN  SALES_REP_ACTIVITY.INTERACTION_DURATION%TYPE,
ADDRESS_LINE_1_V IN  SALES_REP_ACTIVITY.ADDRESS_LINE_1%TYPE,
ADDRESS_LINE_2_V IN  SALES_REP_ACTIVITY.ADDRESS_LINE_2%TYPE,
CITY_V IN  SALES_REP_ACTIVITY.CITY%TYPE,
REGION_V IN  SALES_REP_ACTIVITY.REGION%TYPE,
STATE_V IN  SALES_REP_ACTIVITY.STATE%TYPE,
ZIPCODE_V IN  SALES_REP_ACTIVITY.ZIPCODE%TYPE,
COUNTRY_V IN  SALES_REP_ACTIVITY.COUNTRY%TYPE,
MOBILE_NO_V IN  SALES_REP_ACTIVITY.MOBILE_NO%TYPE,
EMAIL_V IN  SALES_REP_ACTIVITY.EMAIL_ID%TYPE,
CUSTOMER_FLAG_V IN  SALES_REP_ACTIVITY.CUSTOMER_CONVERTED_FLAG%TYPE
)
AS
--SALESREP_ID_V  SALES_REP_ACTIVITY.SALESREP_ID%TYPE;
WAREHOUSE_V  SALES_REPRESENTATIVE.REF_WAREHOUSE_ID%TYPE;
EXC_INTERACTION_TYPE EXCEPTION;
V_INTERACTION_TYPE SALES_REP_ACTIVITY.INTERACTION_TYPE%TYPE;
EXC_CUSTOMER_TYPE EXCEPTION;
V_CUSTOMER_TYPE SALES_REP_ACTIVITY.CUSTOMER_TYPE%TYPE;
EXC_INTERACTION_DURATION EXCEPTION;
V_INTERACTION_DURATION SALES_REP_ACTIVITY.INTERACTION_DURATION%TYPE;
EXC_ADDRESS EXCEPTION;
EXC_PHONE_NUMBER EXCEPTION;
EXC_CUSTOMER_CONVERTED EXCEPTION;
V_CUSTOMER_CONVERTED SALES_REP_ACTIVITY.CUSTOMER_CONVERTED_FLAG%TYPE;
BEGIN
	SELECT INTERACTION_TYPE_V INTO V_INTERACTION_TYPE FROM DUAL;
	SELECT CUSTOMER_TYPE_V INTO V_CUSTOMER_TYPE FROM DUAL;
	SELECT INTERACTION_DURATION_V INTO V_CUSTOMER_CONVERTED FROM DUAL;
	SELECT CUSTOMER_FLAG_V INTO V_CUSTOMER_CONVERTED FROM DUAL;

	IF LOWER(V_INTERACTION_TYPE) NOT IN ('ONCALL','INPERSON','EMAIL')  THEN
		RAISE EXC_INTERACTION_TYPE;
	END IF;


	IF LOWER(V_CUSTOMER_TYPE) NOT IN ('DOCTOR','HOSPITAL','PHARMACY') THEN
        RAISE EXC_CUSTOMER_TYPE;
	END IF;

	IF INSTR(INTERACTION_DURATION_V, '.')>0 THEN
		RAISE EXC_INTERACTION_DURATION;
    END IF;

	IF LENGTH(MOBILE_NO_V) != 10 THEN
        RAISE EXC_PHONE_NUMBER;
    END IF;

	IF LOWER(V_CUSTOMER_CONVERTED) NOT IN ('Y','N') THEN
		RAISE EXC_CUSTOMER_CONVERTED;
	END IF;
	--SELECT TO_NUMBER(SUBSTR(USERNAME, 2)) INTO SALESREP_ID_V FROM ALL_USERS WHERE USERNAME = SYS_CONTEXT('USERENV', 'SESSION_USER'); 
     INSERT INTO  SALES_REP_ACTIVITY VALUES(SALES_REP_ACTIVITY_SEQ.NEXTVAL, SALESREP_ID_V, INITCAP(CUSTOMER_NAME_V), UPPER(INTERACTION_TYPE_V), UPPER(CUSTOMER_TYPE_V), INTERACTION_DATE_V, 
                INTERACTION_DURATION_V, 
                INITCAP(ADDRESS_LINE_1_V), INITCAP(ADDRESS_LINE_2_V), INITCAP(CITY_V), INITCAP(REGION_V), UPPER(STATE_V), ZIPCODE_V, UPPER(COUNTRY_V),  
                MOBILE_NO_V, LOWER(EMAIL_V),
                UPPER(CUSTOMER_FLAG_V));
      COMMIT;

   IF (LOWER(CUSTOMER_FLAG_V) = 'Y') THEN 
       SELECT REF_WAREHOUSE_ID INTO WAREHOUSE_V FROM  SALES_REPRESENTATIVE WHERE ID = SALESREP_ID_V;

         INSERT INTO  CUSTOMER
         VALUES(CUSTOMER_SEQ.NEXTVAL, SALES_REP_ACTIVITY_SEQ.CURRVAL, WAREHOUSE_V, INITCAP(CUSTOMER_NAME_V), UPPER(CUSTOMER_TYPE_V));
         COMMIT;

        INSERT INTO  CUSTOMER_ADDRESS
         VALUES(CUSTOMER_SEQ.CURRVAL,
                 INITCAP(ADDRESS_LINE_1_V) ,INITCAP(ADDRESS_LINE_2_V), INITCAP(CITY_V) ,INITCAP(REGION_V), UPPER(STATE_V), ZIPCODE_V, UPPER(COUNTRY_V));
         COMMIT;

         INSERT INTO  CUSTOMER_CONTACT
         VALUES(CUSTOMER_SEQ.CURRVAL, MOBILE_NO_V, LOWER(EMAIL_V));
         COMMIT;   

   END IF;
EXCEPTION 
		WHEN EXC_INTERACTION_TYPE THEN
           DBMS_OUTPUT.PUT_LINE('INCORRECT INTERACTION TYPE CORRECT INTERACTION TYPE SHOULD BE ONCALL OR INPERSON OR EMAIL');
        WHEN EXC_CUSTOMER_TYPE THEN
           DBMS_OUTPUT.PUT_LINE('INCORRECT CUSTOMER TYPE CORRECT CUSTOMER TYPE SHOULD BE DOCTOR OR PHARMACY OR HOSPITAL');
        WHEN EXC_INTERACTION_DURATION THEN
         DBMS_OUTPUT.PUT_LINE('INTERACTION DURATION SHOULD BE IN MINUTES');
		 WHEN EXC_PHONE_NUMBER THEN
           DBMS_OUTPUT.PUT_LINE('MOBILE PHONE NUMBER SHOULD BE 10 DIGIT NUMBER');
        WHEN EXC_CUSTOMER_CONVERTED THEN
         DBMS_OUTPUT.PUT_LINE('CUSTOMER CONVERTED FLAG SHOULD BE EITHER Y OR N');
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('INCORRECT CUSTOMER DETAILS');
END;
/
CREATE OR REPLACE PROCEDURE UPDATE_INVENTORY
(
WAR_ID INVENTORY.WAREHOUSE_ID%TYPE, 
PROD_ID INVENTORY.PRODUCT_ID%TYPE,
QTY INVENTORY.PRODUCT_QUANTITY%TYPE
) 
AS 
OLD_QTY INVENTORY.PRODUCT_QUANTITY%TYPE;
NEW_QTY INVENTORY.PRODUCT_QUANTITY%TYPE;
EXC_WAREHOUSE EXCEPTION;
EXC_PRODUCT EXCEPTION;
C_NAME INT;
P_NAME INT;

BEGIN 
SELECT COUNT(*) INTO C_NAME FROM WAREHOUSE WHERE ID = WAR_ID;
SELECT COUNT(*) INTO P_NAME FROM PRODUCT WHERE ID = PROD_ID;

IF C_NAME=0 THEN
		RAISE EXC_WAREHOUSE;
	END IF;

IF P_NAME=0 THEN
		RAISE EXC_PRODUCT;
	END IF;

SELECT PRODUCT_QUANTITY INTO OLD_QTY FROM INVENTORY  WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = WAR_ID;
NEW_QTY := OLD_QTY + QTY;
UPDATE INVENTORY SET PRODUCT_QUANTITY = NEW_QTY WHERE PRODUCT_ID = PROD_ID AND WAREHOUSE_ID = WAR_ID;
COMMIT;

EXCEPTION
        WHEN EXC_WAREHOUSE THEN
        DBMS_OUTPUT.PUT_LINE('INVALID WAREHOUSE ID');
        WHEN EXC_PRODUCT THEN
        DBMS_OUTPUT.PUT_LINE('INVALID PRODUCT_ID');
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
END;
/
CREATE OR REPLACE PACKAGE CUSTOMER_ONBOARDING 
AS
 PROCEDURE ONBOARD_DETAILS;
 PROCEDURE insert_sales_rep_activity
(
SALESREP_ID_V  sales_rep_activity.SALESREP_ID%TYPE,
CUSTOMER_NAME_V IN  sales_rep_activity.CUSTOMER_NAME%TYPE,
INTERACTION_TYPE_V IN  sales_rep_activity.INTERACTION_TYPE%TYPE,
CUSTOMER_TYPE_V IN  sales_rep_activity.CUSTOMER_TYPE%TYPE,
INTERACTION_DATE_V IN  sales_rep_activity.interaction_date%TYPE,
INTERACTION_DURATION_V IN  sales_rep_activity.INTERACTION_DURATION%TYPE,
ADDRESS_LINE_1_V IN  sales_rep_activity.ADDRESS_LINE_1%TYPE,
ADDRESS_LINE_2_V IN  sales_rep_activity.ADDRESS_LINE_2%TYPE,
CITY_V IN  sales_rep_activity.CITY%TYPE,
REGION_V IN  sales_rep_activity.REGION%TYPE,
STATE_V IN  sales_rep_activity.STATE%TYPE,
ZIPCODE_V IN  sales_rep_activity.ZIPCODE%TYPE,
COUNTRY_V IN  sales_rep_activity.country%TYPE,
MOBILE_NO_V IN  sales_rep_activity.MOBILE_NO%TYPE,
EMAIL_V IN  sales_rep_activity.EMAIL_ID%TYPE,
CUSTOMER_FLAG_V IN  sales_rep_activity.CUSTOMER_CONVERTED_FLAG%TYPE
);
END CUSTOMER_ONBOARDING;
/
CREATE OR REPLACE PACKAGE BODY CUSTOMER_ONBOARDING AS 
PROCEDURE insert_sales_rep_activity
(
SALESREP_ID_V  sales_rep_activity.SALESREP_ID%TYPE,
CUSTOMER_NAME_V IN  sales_rep_activity.CUSTOMER_NAME%TYPE,
INTERACTION_TYPE_V IN  sales_rep_activity.INTERACTION_TYPE%TYPE,
CUSTOMER_TYPE_V IN  sales_rep_activity.CUSTOMER_TYPE%TYPE,
INTERACTION_DATE_V IN  sales_rep_activity.interaction_date%TYPE,
INTERACTION_DURATION_V IN  sales_rep_activity.INTERACTION_DURATION%TYPE,
ADDRESS_LINE_1_V IN  sales_rep_activity.ADDRESS_LINE_1%TYPE,
ADDRESS_LINE_2_V IN  sales_rep_activity.ADDRESS_LINE_2%TYPE,
CITY_V IN  sales_rep_activity.CITY%TYPE,
REGION_V IN  sales_rep_activity.REGION%TYPE,
STATE_V IN  sales_rep_activity.STATE%TYPE,
ZIPCODE_V IN  sales_rep_activity.ZIPCODE%TYPE,
COUNTRY_V IN  sales_rep_activity.country%TYPE,
MOBILE_NO_V IN  sales_rep_activity.MOBILE_NO%TYPE,
EMAIL_V IN  sales_rep_activity.EMAIL_ID%TYPE,
CUSTOMER_FLAG_V IN  sales_rep_activity.CUSTOMER_CONVERTED_FLAG%TYPE
)
AS
--SALESREP_ID_V  sales_rep_activity.SALESREP_ID%TYPE;
WAREHOUSE_V  sales_representative.ref_warehouse_id%TYPE;
exc_interaction_type exception;
V_INTERACTION_TYPE sales_rep_activity.INTERACTION_TYPE%TYPE;
EXC_CUSTOMER_TYPE EXCEPTION;
V_CUSTOMER_TYPE sales_rep_activity.CUSTOMER_TYPE%TYPE;
EXC_INTERACTION_DURATION EXCEPTION;
V_INTERACTION_DURATION sales_rep_activity.INTERACTION_DURATION%TYPE;
EXC_ADDRESS EXCEPTION;
EXC_PHONE_NUMBER EXCEPTION;
EXC_CUSTOMER_CONVERTED EXCEPTION;
V_CUSTOMER_CONVERTED sales_rep_activity.CUSTOMER_CONVERTED_FLAG%TYPE;
BEGIN
	select INTERACTION_TYPE_V INTO V_INTERACTION_TYPE from DUAL;
	select CUSTOMER_TYPE_V INTO V_CUSTOMER_TYPE FROM DUAL;
	select INTERACTION_DURATION_V INTO V_CUSTOMER_CONVERTED from dual;
	SELECT CUSTOMER_FLAG_V INTO V_CUSTOMER_CONVERTED FROM DUAL;

	IF lower(V_INTERACTION_TYPE) not in ('oncall','inperson','email')  THEN
		RAISE exc_interaction_type;
	END IF;


	IF lower(V_CUSTOMER_TYPE) not in ('doctor','hospital','pharmacy') THEN
        RAISE EXC_CUSTOMER_TYPE;
	END IF;

	IF INSTR(INTERACTION_DURATION_V, '.')>0 THEN
		RAISE EXC_INTERACTION_DURATION;
    END IF;

	IF length(MOBILE_NO_V) != 10 THEN
        RAISE EXC_PHONE_NUMBER;
    END IF;

	IF lower(V_CUSTOMER_CONVERTED) not in ('y','n') THEN
		RAISE EXC_CUSTOMER_CONVERTED;
	END IF;
	--select to_number(substr(username, 2)) into SALESREP_ID_V from all_users where username = sys_context('USERENV', 'SESSION_USER'); 
     INSERT INTO  sales_rep_activity VALUES(SALES_REP_ACTIVITY_SEQ.nextval, SALESREP_ID_V, initcap(CUSTOMER_NAME_V), upper(INTERACTION_TYPE_V), upper(CUSTOMER_TYPE_V), INTERACTION_DATE_V, 
                INTERACTION_DURATION_V, 
                initcap(ADDRESS_LINE_1_V), initcap(ADDRESS_LINE_2_V), initcap(CITY_V), initcap(REGION_V), upper(STATE_V), ZIPCODE_V, upper(COUNTRY_V),  
                MOBILE_NO_V, lower(EMAIL_V),
                upper(CUSTOMER_FLAG_V));
      COMMIT;

   IF (lower(CUSTOMER_FLAG_V) = 'y') then 
       select ref_warehouse_id into WAREHOUSE_V from  sales_representative where id = SALESREP_ID_V;

         INSERT INTO  customer
         VALUES(CUSTOMER_SEQ.nextval, SALES_REP_ACTIVITY_SEQ.currval, WAREHOUSE_V, initcap(CUSTOMER_NAME_V), upper(CUSTOMER_type_V));
         COMMIT;

        INSERT INTO  customer_address
         VALUES(CUSTOMER_SEQ.currval,
                 initcap(ADDRESS_LINE_1_V) ,initcap(ADDRESS_LINE_2_V), initcap(CITY_V) ,initcap(REGION_V), upper(STATE_V), ZIPCODE_V, upper(COUNTRY_V));
         COMMIT;

         INSERT INTO  customer_contact
         VALUES(CUSTOMER_SEQ.currval, MOBILE_NO_V, lower(EMAIL_V));
         COMMIT;   

   END IF;
EXCEPTION 
		WHEN exc_interaction_type THEN
           DBMS_OUTPUT.PUT_LINE('Incorrect interaction type correct interaction type should be oncall or inperson or email');
        WHEN EXC_CUSTOMER_TYPE THEN
           DBMS_OUTPUT.PUT_LINE('Incorrect customer type correct customer type should be doctor or pharmacy or hospital');
        WHEN EXC_INTERACTION_DURATION THEN
         DBMS_OUTPUT.PUT_LINE('Interaction Duration should be in minutes');
		 WHEN EXC_PHONE_NUMBER THEN
           DBMS_OUTPUT.PUT_LINE('Mobile phone number should be 10 digit number');
        WHEN EXC_CUSTOMER_CONVERTED THEN
         DBMS_OUTPUT.PUT_LINE('Customer converted flag should be either y or n');
		when no_data_found then
			dbms_output.put_line('Incorrect Customer Details');
END insert_sales_rep_activity;
PROCEDURE ONBOARD_DETAILS
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------');
DBMS_OUTPUT.PUT_LINE('TO ONBOARD CUSTOMER BELOW DETAILS OF CUSTOMER ARE REQUIRED');
DBMS_OUTPUT.PUT_LINE('CUSTOMER DETAILS');
DBMS_OUTPUT.PUT_LINE('CUSTOMER_NAME');
DBMS_OUTPUT.PUT_LINE('ADDRESS_LINE_1');
DBMS_OUTPUT.PUT_LINE('ADDRESS_LINE_2');
DBMS_OUTPUT.PUT_LINE('CITY');
DBMS_OUTPUT.PUT_LINE('REGION');
DBMS_OUTPUT.PUT_LINE('STATE');
DBMS_OUTPUT.PUT_LINE('ZIPCODE');
DBMS_OUTPUT.PUT_LINE('COUNTRY');
DBMS_OUTPUT.PUT_LINE('MOBILE_NO');
DBMS_OUTPUT.PUT_LINE('EMAIL');
DBMS_OUTPUT.PUT_LINE('INTERACTION_TYPE');
DBMS_OUTPUT.PUT_LINE('CUSTOMER_TYPE');
DBMS_OUTPUT.PUT_LINE('INTERACTION_DATE');
DBMS_OUTPUT.PUT_LINE('INTERACTION_DURATION');
DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------');
DBMS_OUTPUT.PUT_LINE('EXECUTE CUSTOMER_ONBOARD.INSERT_SALES_REP_ACTIVITY TO ONBOARD CUSTOMER');
END; 
END CUSTOMER_ONBOARDING; 
/
create or replace TRIGGER price_log
after update of cost_price, selling_price   on product
FOR EACH row

BEGIN

    if :new.cost_price <> :old.cost_price or :new.selling_price <> :old.selling_price then
         INSERT INTO product_price_log (id, name, old_cost_price, old_selling_price,DATE_OF_CHANGE)
           VALUES (:old.id, :old.name, :old.cost_price, :old.selling_price, SYSDATE);
    END IF;


END;


--cursor mahavir product_price_update
declare 
v_id product.id%type;
v_cost_price product.cost_price%type;
v_selling_price product.selling_price%type;
cursor c_product_update is select id, cost_price, selling_price from product;
begin 
open c_product_update;
loop 
v_cost_price := 0;
v_selling_price := 0;
fetch c_product_update into v_id, v_cost_price, v_selling_price;
exit when c_product_update%notfound;
v_cost_price:= v_cost_price + 1;
v_selling_price:= v_selling_price + 1;
update product set cost_price = v_cost_price, selling_price = v_selling_price;
end loop;
close c_product_update;
end ;

